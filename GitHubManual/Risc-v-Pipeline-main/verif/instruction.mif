DEPTH = 65536;          -- The size of memory in words
WIDTH = 8;              -- The size of data in bits
ADDRESS_RADIX = DEC;    -- The radix for address values
DATA_RADIX = BIN;       -- The radix for data values
CONTENT                 -- Start of (address: data pairs)
BEGIN

000: 10010011;	-- addi x1,x0,10      # x1 = 10
001: 00000000;
002: 10100000;
003: 00000000;

004: 00010011;	-- addi x2,x0,-3      # x2 = -3
005: 00000001;
006: 11010000;
007: 11111111;

008: 10010011;	-- addi x3,x0,10      # x3 = 10
009: 00000001;
010: 10100000;
011: 00000000;

012: 00010011;	-- addi x4,x0,-3      # x4 = -3
013: 00000010;
014: 11010000;
015: 11111111;

016: 10010011;	-- addi x5,x0,0       # x5 = 0
017: 00000010;
018: 00000000;
019: 00000000;

020: 01100011;	-- beq x1,x3,16       # iguais → pula
021: 10001000;
022: 00110000;
023: 00000000;

024: 10010011;	-- addi x5,x0,127     # pulado
025: 00000010;
026: 11110000;
027: 00000111;

028: 00010011;	-- addi x6,x0,255     # pulado inicialmente e depois retorna com x6 = 255
029: 00000011;
030: 11110000;
031: 00001111;

032: 10010011;	-- addi x1,x0,-3      # altera o valor de x1 para -3
033: 00000000;
034: 11010000;
035: 11111111;

036: 11100011;	-- bne x1,x2,-8       # diferentes → pula para anterior e coloca 255 em x6
037: 10011100;
038: 00100000;
039: 11111110;

040: 10010011;	-- addi x1,x0,10      # retorna o valor x1 para 10
041: 00000000;
042: 10100000;
043: 00000000;

044: 01100011;	-- blt x2,x1,8        # -3 < 10 → pula
045: 01000100;
046: 00010001;
047: 00000000;

048: 10010011;	-- addi x7,x0,255     # pulado
049: 00000011;
050: 11110000;
051: 00001111;

052: 10010011;	-- addi x7,x0,3       # executado
053: 00000011;
054: 00110000;
055: 00000000;

056: 01100011;	-- bge x1,x4,8        # 10 >= -3 → pula
057: 11010100;
058: 01000000;
059: 00000000;

060: 00010011;	-- addi x8,x0,255     # pulado
061: 00000100;
062: 11110000;
063: 00001111;

064: 00010011;	-- addi x8,x0,4       # executado
065: 00000100;
066: 01000000;
067: 00000000;

068: 10010011;	-- slti x9,x2,1       # -3 < 1 → x9 = 1
069: 00100100;
070: 00010001;
071: 00000000;

072: 00010011;	-- slti x10,x1,-1     # 10 < -1? falso → x10 = 0
073: 10100101;
074: 11110000;
075: 11111111;

076: 10110011;	-- slt x11,x2,x1      # -3 < 10 → x12 = 1
077: 00100101;
078: 00010001;
079: 00000000;

080: 00110011;	-- slt x12,x1,x2      # 10 < -3? falso → x13 = 0
081: 10100110;
082: 00100000;
083: 00000000;

084: 10010011;	-- slli x13,x1,1      # 10 << 1 = 20
085: 10010110;
086: 00010000;
087: 00000000;

088: 00010011;	-- srli x14,x1,1      # 10 >> 1 = 5 (sem sinal)
089: 11010111;
090: 00010000;
091: 00000000;

092: 10010011;	-- srai x15,x2,1      # -3 >> 1 = -2 (com sinal)
093: 01010111;
094: 00010001;
095: 01000000;

096: 00110011;	-- add x16,x1,x2      # 10 + (-3) = 7
097: 10001000;
098: 00100000;
099: 00000000;

100: 10110011;	-- sub x17,x1,x2      # 10 - (-3) = 13
101: 10001000;
102: 00100000;
103: 01000000;

104: 00110011;	-- xor x18,x1,x2      # xor com valor negativo -9 ou 0xFFFFFFF7
105: 11001001;
106: 00100000;
107: 00000000;

108: 10110011;	-- or x19,x1,x2       # or com valor negativo -1 ou 0xFFFFFFFF
109: 11101001;
110: 00100000;
111: 00000000;

112: 00110011;	-- and x20,x1,x2      # and com valor negativo 8 ou 0x00000008
113: 11111010;
114: 00100000;
115: 00000000;

116: 00010011;	-- addi x22,x0,64     # endereço base
117: 00001011;
118: 00000000;
119: 00000100;

120: 10010011;	-- addi x23,x0,291
121: 00001011;
122: 00110000;
123: 00010010;

124: 00100011;	-- sw x23,0(x22)
125: 00100000;
126: 01111011;
127: 00000001;

128: 00000011;	-- lw x24,0(x22)      # x24 = 0x123
129: 00101100;
130: 00001011;
131: 00000000;

132: 10010011;	-- addi x25,x0,255
133: 00001100;
134: 11110000;
135: 00001111;

136: 00100011;	-- sb x25,4(x22)
137: 00000010;
138: 10011011;
139: 00000001;

140: 00000011;	-- lb x26,4(x22)      # x26 = 0xffffffff (signed) = -1
141: 00001101;
142: 01001011;
143: 00000000;

144: 10000011;	-- lbu x27,4(x22)     # x27 = 0x000000ff = 255
145: 01001101;
146: 01001011;
147: 00000000;

148: 00010011;	-- addi x28,x0,564
149: 00001110;
150: 01000000;
151: 00100011;

152: 00100011;	-- sh x28,8(x22)
153: 00010100;
154: 11001011;
155: 00000001;

156: 10000011;	-- lh x29,8(x22)      # x29 = 0x234
157: 00011110;
158: 10001011;
159: 00000000;

160: 01101111;	-- jal x30,8
161: 00001111;
162: 10000000;
163: 00000000;

164: 10010011;	-- addi x31,x0,128    # pulado
165: 00001111;
166: 00000000;
167: 00001000;

168: 10010011;	-- addi x21,x0,127    # x21 = 0x0F
169: 00001010;
170: 11110000;
171: 00000111;

172: 10010011;	-- addi x31,x0,-4
173: 00001111;
174: 11000000;
175: 11111111;

176: 01100111;	-- jalr x0,x31,0      # salta (simula halt)
177: 10000000;
178: 00001111;
179: 00000000;

END;